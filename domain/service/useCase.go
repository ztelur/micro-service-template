/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package service

import (
	"github.com/longjoy/micro-service/domain/model"
)

// RegistrationUseCaseInterface is for users to register themselves to an application. It has registration related functions.
// ModifyAndUnregisterWithTx() is the one supporting transaction, the other are not.
type RegistrationUseCaseInterface interface {
	// RegisterUser register a user to an application, basically save it to a database. The returned resultUser that has
	// a Id ( auto generated by database) after persisted
	RegisterUser(user *model.User) (resultUser *model.User, err error)
	// UnregisterUser unregister a user from an application by user name, basically removing it from a database.
	UnregisterUser(username string) error
	// ModifyUser change user information based on the User.Id passed in.
	ModifyUser(user *model.User) error
	// ModifyAndUnregister change user information and then unregister the user based on the User.Id passed in.
	// It is created to illustrate transaction, no real use.
	ModifyAndUnregister(user *model.User) error
}

// RegistrationUseTxCaseInterface is for use case with transaction. It has registration related functions.
type RegistrationTxUseCaseInterface interface {
	// ModifyAndUnregisterWithTx changes user information and then unregisters the user based on the User.Id passed in.
	// It supports transaction
	// It is created to illustrate transaction, no real life business logic behind it.
	ModifyAndUnregisterWithTx(user *model.User) error
}

// ListUserUseCaseInterface handles different ways to retrieve user information
type ListUserUseCaseInterface interface {
	// ListUser retrieves all users as an array of user
	ListUser() ([]model.User, error)
	// Find retrieves a user based on a user's id
	Find(id int) (*model.User, error)
}

// ListCourseUseCaseInterface handles different ways to retrieve user information
// It is created to show POC of courseDatServiceFactory, no real use
// Only SQL database is implemented for this use case, not couchdb.
type ListCourseUseCaseInterface interface {
	// ListCourse retrieves all courses as an array of course
	ListCourse() ([]model.Course, error)
}
